version: '3'

vars:
  UV_EXTERNAL:
    sh: "( uv --version >/dev/null 2>&1 && echo 1 ) || echo 0"
  UV_DIR:
    sh: "( uv --version >/dev/null 2>&1 && dirname $(which uv) ) || echo {{.ROOT_DIR}}/.tmp/bin"
  UV: "{{.UV_DIR}}/uv"
  UVX: "{{.UV_DIR}}/uvx"
  VENV: "{{.ROOT_DIR}}/.venv"

  DEFAULT_UV_SYNC_OPTS: "--frozen"
  UV_SYNC_OPTS: "{{.UV_SYNC_OPTS | default .DEFAULT_UV_SYNC_OPTS}}"

  # MYPY
  DEFAULT_LINT_MYPY: 1
  LINT_MYPY: "{{.LINT_MYPY | default .DEFAULT_LINT_MYPY}}"
  DEFAULT_MYPY_OPTS: "--check-untyped-defs"
  MYPY_OPTS: "{{.MYPY_OPTS | default .DEFAULT_MYPY_OPTS}}"
  DEFAULT_MYPY_ARGS: "."
  MYPY_ARGS: "{{.MYPY_ARGS | default .DEFAULT_MYPY_ARGS}}"
  MYPY: "{{.UV}} run mypy"

  # RUFF
  DEFAULT_LINT_RUFF: 1
  LINT_RUFF: "{{.LINT_RUFF | default .DEFAULT_LINT_RUFF}}"
  DEFAULT_FIX: 1
  FIX: "{{.FIX | default .DEFAULT_FIX}}"
  DEFAULT_RUFF_OPTS: ""
  RUFF_OPTS: "{{.RUFF_OPTS | default .DEFAULT_RUFF_OPTS}}"
  DEFAULT_RUFF_ARGS: "."
  RUFF_ARGS: "{{.RUFF_ARGS | default .DEFAULT_RUFF_ARGS}}"
  RUFF: "{{.UV}} run ruff"

  # PYTEST
  DEFAULT_TEST_PYTEST: 1
  TEST_PYTEST: "{{.TEST_PYTEST | default .DEFAULT_TEST_PYTEST}}"
  DEFAULT_COVERAGE: 0
  COVERAGE: "{{.COVERAGE | default .DEFAULT_COVERAGE}}"
  DEFAULT_PYTEST_COVERAGE_OPTS: "--no-cov-on-fail --cov=jinja_tree --cov-report=term --cov-report=html --cov-report=xml"
  PYTEST_COVERAGE_OPTS: "{{.PYTEST_COVERAGE_OPTS | default .DEFAULT_PYTEST_COVERAGE_OPTS}}"
  DEFAULT_PYTEST_ARGS: "tests"
  PYTEST_ARGS: "{{.PYTEST_ARGS | default .DEFAULT_PYTEST_ARGS}}"
  PYTEST: "{{.UV}} run pytest"

tasks:

  install:
    desc: "(advanced) Install uv (if not already installed) in a local temporary directory"
    status:
      - "test '{{.UV_EXTERNAL}}' = '1'"
    env:
      UV_NO_MODIFY_PATH: 1
      XDG_BIN_HOME: "{{.UV_DIR}}"
    silent: true
    cmds:
      - echo 'INSTALLING UV...'
      - echo '{{.UV_DIR}}'
      - echo '{{.UV_EXTERNAL}}'
      - mkdir -p "{{.UV_DIR}}"
      - wget -O install.sh https://astral.sh/uv/install.sh
      - chmod +x install.sh
      - ./install.sh 
      - rm -f install.sh
      - "echo 'OK: UV INSTALLED'"
  lock:
    desc: "(advanced) Lock the uv environment"
    deps:
      - install
    cmds:
      - "{{.UV}} lock"
    sources:
      - "{{.ROOT_DIR}}/pyproject.toml"
    generates:
      - "{{.ROOT_DIR}}/uv.lock"

  sync:
    desc: "(advanced) Sync the uv environment"
    silent: true
    status:
      - |
          if ! [ -f "{{.VENV}}/.uv_sync_opts" ]; then
            exit 1
          fi
          if [ "{{.UV_SYNC_OPTS}}" != "$(cat {{.VENV}}/.uv_sync_opts)" ]; then
            exit 1
          fi
          if ! [ -f "{{.VENV}}/.uv_lock.md5" ]; then
            exit 1
          fi
          if [ "$(md5sum uv.lock)" != "$(cat {{.VENV}}/.uv_lock.md5)" ]; then
            exit 1
          fi
    deps: 
      - lock
    cmds:
      - "{{.UV}} sync {{.UV_SYNC_OPTS}}"
      - md5sum uv.lock >{{.VENV}}/.uv_lock.md5
      - echo "{{.UV_SYNC_OPTS}}" >{{.VENV}}/.uv_sync_opts

  lint:
    desc: "Lint the code"
    deps:
      - sync
    internal: true
    silent: true
    cmds:
      - |
          if [ "{{.LINT_RUFF}}" = "1" ]; then
            if [ "{{.FIX}}" = "1" ]; then
              {{.RUFF}} format {{.RUFF_OPTS}} {{.RUFF_ARGS}}
              {{.RUFF}} check --fix {{.RUFF_OPTS}} {{.RUFF_ARGS}}
            else
              {{.RUFF}} format {{.RUFF_OPTS}} --check {{.RUFF_ARGS}}
              {{.RUFF}} check {{.RUFF_OPTS}} {{.RUFF_ARGS}}
            fi
          fi
      - |
          if [ "{{.LINT_MYPY}}" = "1" ]; then
            {{.MYPY}} {{.MYPY_OPTS}} {{.MYPY_ARGS}}
          fi

  test:
    desc: "Test the code"
    deps:
      - sync
    internal: true
    silent: true
    cmds:
      - |
          if [ "{{.TEST_PYTEST}}" = "1" ]; then
            if [ "{{.COVERAGE}}" = "1" ]; then
              {{.PYTEST}} {{.PYTEST_OPTS}} {{.PYTEST_COVERAGE_OPTS}} {{.PYTEST_ARGS}}
            else
              {{.PYTEST}} {{.PYTEST_OPTS}} {{.PYTEST_ARGS}}
            fi
          fi

  clean:
    internal: true
    silent: true
    cmds:
      - |
          if [ "{{.UV_EXTERNAL}}" = "0" ]; then
            rm -f "{{.UVX}}"
            rm -Rf {{.UV}}
          fi
      - rm -Rf .*_cache build
      - find . -type d -name __pycache__ -exec rm -Rf {} \; 2>/dev/null || true
      - "echo 'OK: CLEANED'"
