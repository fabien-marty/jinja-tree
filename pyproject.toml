[project]
name = "jinja-tree"
version = "0.0.0"
description = "CLI to process jinja (jinja2) templates in a directory tree"
authors = [{ name = "Fabien MARTY", email = "fabien.marty@botify.com" }]
requires-python = "~=3.8"
readme = "README.md"
license = "MIT"
keywords = [
    "jinja",
    "jinja2",
    "cli",
    "tree",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Topic :: Software Development",
    "Topic :: Text Processing :: General",
    "Topic :: Utilities",
]
dependencies = [
    "jinja2>=3.1.2,<4",
    "typer>=0.9.0",
    "stlog>= 0.1.0",
    "tomli>=2.0.1,<3",
    "python-dotenv>=1.0.0",
    "rich>=13.7.0",
    "dataclasses-json>=0.6.4",
]

[project.urls]
Homepage = "https://github.com/fabien-marty/jinja-tree"
Repository = "https://github.com/fabien-marty/jinja-tree"

[project.scripts]
jinja-tree = "jinja_tree.infra.controllers.cli_tree:app"
jinja-stdin = "jinja_tree.infra.controllers.cli_stdin:app"

[dependency-groups]
dev = [
    "ruff>=0.1.11,<0.2",
    "mypy>=1.8.0,<2",
    "pytest>=7.4.4,<8",
    "rich>=13.7.0,<14",
    "pytest-cov>=4.1.0,<5",
    "typing-extensions>=4.9.0,<5",
]

[tool.hatch.build.targets.sdist]
include = ["jinja_tree"]

[tool.hatch.build.targets.wheel]
include = ["jinja_tree"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.8
target-version = "py38"

[tool.ruff.lint]
select = ["UP", "E", "F", "W", "PL", "I", "RUF"]
ignore = ["PLR0913", "E501", "PLR0912", "PLR2004", "RUF005", "UP007"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
